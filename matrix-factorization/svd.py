import numpy as np
import pandas as pd

class svdFactorization(object):
    def __init__(self):
        self.load_data()

    def load_data(self):
        """
        Horrible method to partially load dataset
        need to clean later
        """
        users = []
        movies = []

        f = open("data/ratings.dat")
        fl = f.readlines()

        count = 0
        for line in fl:
            users.append(line.split("::")[0])
            movies.append(line.split("::")[1])
            count+=1
            if(count == 10000): break
        self.users = set(users)
        self.movies = set(movies)
        self.M = pd.DataFrame(np.nan, columns=self.movies, index=self.users)
        count = 0
        for line in fl:
            self.M[line.split("::")[1]][line.split("::")[0]] = line.split("::")[2]
            count+=1
            if(count == 10000): break
        
        self.M.fillna(0, inplace=True)
        average_rating = self.M[self.M > 0].mean()
        self.M[self.M == 0] = 0
        self.M.fillna(average_rating, inplace=True)

    def train(self):
        """
        Uses numpy's built in SVD function to decompose our user-movie interaction
        matrix into U, Sigma, and Vt, and then reduces those matrices
        and multiplies the reduced matrices in order to generate the prediction matrix
        """
        U, Sigma, Vt = np.linalg.svd(self.M)
        U_reduced, Vt_reduced, Sigma_reduced = self.reduceSVD(U, Sigma, Vt, 4)
        M_hat = U_reduced*Sigma_reduced*Vt_reduced
        self.M_hat_matrix = pd.DataFrame(M_hat, columns=self.movies, index=self.users)

    def predict(self, movie, user):
        """
        Predicts the rating a user would give a film
        Inputs:
        - movie: a movie id
        - user: a user id
        Outputs: predicted rating
        """
        return self.M_hat_matrix[movie][user]

    
    def reduceSVD(self, U, Sigma, Vt, k):
        """
        Reduces matrices generated by SVD to k dimensions
        Inputs:
        - U: User feature matrix is a numpy array of shape (m,m)
        - Sigma: Diagonal matrix is a numpy array of shape (m,n)
        - Vt: Item feature matrix is a numpy array of shape (n,n)
        where m and n are the dimensions of our user-movie interaction matrix

        Outputs:
        - U_reduced: Reduced user feature matrix is a numpy array of shape (m,k)
        - Sigma_reduced: Reduced diagonal matrix is a numpy array of shape (k,k)
        - Vt_reduced: Reduced item feature matrix is a numpy array of shape (k,n)        
        """
        U_reduced = np.mat(U[:, :k])
        Vt_reduced = np.mat(Vt[:k, :])
        Sigma_reduced = np.eye(k)*Sigma[:k]

        return U_reduced, Vt_reduced, Sigma_reduced
